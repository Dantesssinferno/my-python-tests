# ООП - это не работа в одном модуле.
# Модульность в ООП — это принцип, позволяющий разделять программу на независимые и взаимосвязанные части,
# называемые модулями или классами. Это упрощает разработку, тестирование и поддержку кода.
# Как правило структура проектов состоит из множества модулей,
# давайте рассмотрим пример на проекте автоматизации тестирования.
# Он включает в себя различные модули - модуль базового класса, где хранятся общие методы,
# модуль с методами для проверок, модули с методами шагов тестов, модули с самими тестами и т.д.
# И для того, чтобы это все полноценно использовать, Нам необходимо импортировать их друг в друга.

# Создадим два модуля: base_class.py - в нем будет храниться Родительский класс и класс Наследник,
# new_alphabet.py - модуль, где будут создаваться экземпляры классов.

class Alphabet:
    """Класс по созданию и работе с алфавитом"""
    def __init__(self, title, abbreviation, list_letters):
        """Атрибуты класса"""
        self.title = title
        self.abbreviation = abbreviation
        self.list_letters = list_letters
        print("Новый алфавит создан")

    def description(self):
        """Получение описания алфавита"""
        description = (f"Название данного алфавита - {self.title}, его аббревиатура - {self.abbreviation},"
                       f" список букв - {self.list_letters}")
        print(description)

    def count_letter(self):
        """Получение количества букв в алфавите"""
        count = (len(self.list_letters))
        print(f"Количество букв в алфавите равно: {count}")


class Cyrillic(Alphabet):
    """Языки группы Кириллица"""

    def __init__(self, title, abbreviation, list_letters):
        super().__init__(title, abbreviation, list_letters)
        """Указываем какие атрибуты имеет Класс-наследник"""
        self.language_group = "Cyrl"

    def description(self):
        """Получение описания алфавита"""
        description = (f"Название данного алфавита - {self.title}, группа языков - {self.language_group},"
                          f"его аббревиатура - {self.abbreviation}, список букв - {self.list_letters}")
        print(description)

    def get_language_group(self):
        """Метод возвращающий абревиатуру языковой группы"""
        print(f"Абревиатура языковой группы {self.language_group}")
        return self.language_group

# Как видите здесь идут уже знакомые Нам классы и их аргументы,
# но Мы не создаем в данном модуле их экземпляры классов.
