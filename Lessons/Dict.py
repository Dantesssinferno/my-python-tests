# В Python словари (dictionaries) и множества (sets) являются важными и широко используемыми типами данных.
# Они предоставляют эффективные способы хранения и обработки данных.

# Словари представляют собой упорядоченные коллекции пар ключ-значение.
# Они позволяют быстро получать, изменять и удалять данные по ключу.

# Создание словаря
person = {
    "name": "Alex",
    "age": 30,
    "city": "SPB"
}
# Для того, чтобы распечатать весь словарь, нам необходимо прописать следующую команду:

print(person)
# Результат: {'name': 'Alex', 'age': 30, 'city': 'SPB'})

# Доступ к элементам словаря

# Доступ к элементам словаря можно получить обратившись к одному из его ключей, тут есть несколько вариантов:
name_person = person["name"] # Создание отдельной переменной
print(name_person)
# Результат: Alex

print(person["name"]) # Вывод на печать через обращение к ключу
# Результат: Alex

print(person.get("age")) # Вывод на печать через обращение к ключу, через метод get()

# Добавление нового ключа в словарь

person["email"] = "alex@mail.ru" # Добавление нового ключа в словарь и его значение
print(person) # Распечатаем новое содержимое словаря
# Результат: {'name': 'Alex', 'age': 30, 'city': 'SPB', 'email': 'alex@mail.ru'}

# При этом первоначальный наш словарь остался неизменным

# Изменение данных в словаре

# Добавим новое поле email в словарь

person = {
    "name": "Alex",
    "age": 30,
    "city": "SPB",
    "email": "alex@mail.ru"
}
print(person)    # Распечатаем, чтобы посмотреть содержимое до  изменений

# Результат: {'name': 'Alex', 'age': 30, 'city': 'SPB', 'email': 'alex@mail.ru'}
person["email"] = "alex_stepik@mail.ru"    # Изменяем значение ключа email

print(person)# Распечатаем, чтобы посмотреть содержимое после изменений

# Результат: {'name': 'Alex', 'age': 30, 'city': 'SPB', 'email': 'alex_stepik@mail.ru'}

# Удаление данных в словаре
person = {
    "name": "Alex",
    "age": 30,
    "city": "SPB",
    "email": "alex@mail.ru"
}
print(person)    # Распечатаем, чтобы посмотреть содержимое до  изменений
# Результат: {'name': 'Alex', 'age': 30, 'city': 'SPB', 'email': 'alex@mail.ru'}

del person["city"]    # Удаление ключа city
print(person)    # Распечатаем, чтобы посмотреть содержимое после  изменений
# Результат: {'name': 'Alex', 'age': 30, 'email': 'alex@mail.ru'}

# Основные операции со словарями

# 1. Получение списка ключей: person.keys() - возвращает представление всех ключей, содержащихся в словаре.
# Этот метод не возвращает копию списка ключей, а предоставляет динамическое представление, которое отражает любые изменения, внесенные в словарь.
# Давайте рассмотрим синтаксис:

# dictionary.keys()
# Где:
# dictionary - словарь, из которого нужно получить список ключей

# Рассмотрим пример:
person = {
    "name": "Alex",
    "age": 30,
    "city": "SPB",
}

keys = person.keys()
print(keys)
# Результат: dict_keys(['name', 'age', 'city'])

# Так же Мы можем это сделать через цикл for:

for key in person.keys():
    print(key)
# Результат:
# name
# age
# city
# Проверка наличия ключа среди ключей словаря:

# Так же Мы можем проверять, есть ли среди ключей словаря определенный ключ, который является для нас важным

if "name" in person.keys():
    print("Ключ name присутствует в словаре")

# 2.Получение списка значений: person.values() - возвращает представление всех значений, содержащихся в словаре. Аналогично методу keys(), метод values() не возвращает копию списка значений, а предоставляет динамическое представление, которое отражает любые изменения, внесенные в словарь.
# Давайте рассмотрим синтаксис:

# dictionary.values()
# Где:
# dictionary - словарь, из которого нужно получить список ключей

Рассмотрим пример:

person = {
    "name": "Alex",
    "age": 30,
    "city": "SPB",
}

values = person.values()
print(values)
# Результат: dict_values(['Alex', 30, 'SPB'])

# В этом примере Мы создаем словарь person с тремя ключами и соответствующими значениями.
# Затем Мы используем метод values() для получения представления всех значений в словаре и сохраняем его в переменной values.

# Так же Мы можем это сделать через цикл for:

person = {
    "name": "Alex",
    "age": 30,
    "city": "SPB",
}

for value in person.values():
    print(value)

# Результат:
#
# Alex
# 30
# SPB
# Так же Мы можем проверять, есть ли среди значений словаря определенное значение, который является для нас важным

if 30 in person.values():
    print("Значение 30 есть в словаре")

#

# 3.Получение списка пар ключ-значение: person.items() - возвращает представление всех пар ключ-значение, содержащихся в словаре.
# Аналогично методам keys() и values(), метод items() не возвращает копию списка пар, а предоставляет динамическое представление, которое отражает любые изменения, внесенные в словарь.

# Давайте рассмотрим синтаксис:

# dictionary.items()
# Где:
# dictionary - словарь, из которого нужно получить список пар ключ-значение.

# Рассмотрим пример:

person = {
    "name": "Alex",
    "age": 30,
    "city": "SPB",
}

items = person.items()
print(items)

# Результат: dict_items([('name', 'Alex'), ('age', 30), ('city', 'SPB')])
# В этом примере Мы создаем словарь person с тремя ключами и соответствующими значениями.
# Затем Мы используем метод items() для получения представления всех пар ключ-значение в словаре и сохраняем его в переменной items.

# Так же Мы можем это сделать через цикл for:

for key, value in person.items():
    print(f"Key: {key}, Value: {value}")


# Результат:
#
# Key: name, Value: Alex
# Key: age, Value: 30
# Key: city, Value: SPB

# Так же Мы можем проверять, есть ли среди пар ключ-значение словаря определенная пара ключ-значение, которая является для нас важной.

if ("name", "Alex") in person.items():
    print("Пара ('name', 'Alex') присутствует в словаре")


# Результат: Пара ('name', 'Alex') присутствует в словаре