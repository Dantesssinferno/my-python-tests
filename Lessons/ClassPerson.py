# Объектно-ориентированное программирование (ООП) — это парадигма программирования, основанная на концепции "объектов",
# которые могут содержать данные и код: данные в виде полей (атрибутов),
# и код в виде процедур (методов).
# ООП позволяет организовывать код более структурированно и удобно для повторного использования.


# Классы

# Класс — это шаблон для создания объектов, который определяет набор атрибутов и методов,
# которые будут у этих объектов. Классы являются основным строительным блоком объектно-ориентированного
# программирования (ООП) в Python и позволяют организовывать код более структурированно.

# Класс определяется с помощью ключевого слова class, за которым следует имя класса и двоеточие.
# Внутри класса можно определить методы и атрибуты.

# Давайте создадим класс Алфавита - Alphabet, с помощью которого Мы сможем создавать алфавиты на различные языки и взаимодействовать с ним.
# Создадим новый модуль. Поместим в него следующий код.

class Alphabet:
    """Класс по созданию и работе с алфавитом"""
    def __init__ (self, title:str, abbreviation:str, list_letters:str): # в конструкторе перечисляем параметры класса
        """Аргументы класса"""
        self.title = title                  # атрибут класса
        self.abbreviation = abbreviation    # атрибут класса
        self.list_letters = list_letters    # атрибут класса
        print("Новый алфавит создан")

# russian = Alphabet("Русский", "RU", "абвгдеёжзийклмнопрстуфхцчшщъыьэюя") # экземпляр класса

# Наш класс включает в себя метод __init__ c перечислением всех обязательных аргументов данного класса.
# Обратите внимание, что перед названием и после него идет два нижних подчеркивания __.

# Метод — это функция, которая связана с объектом и определена внутри класса.
# Методы позволяют выполнять операции с данными, которые хранятся в экземплярах классов,
# и обеспечивают возможность взаимодействия с объектами.
# Проще говоря, метод - это функция, которая принадлежит классу.

# В Python метод __init__ является специальным методом, который используется для инициализации объектов класса.
# Он автоматически вызывается при создании нового экземпляра класса.
# Атрибуты могут быть заданы при создании объекта.

# self — это специальный параметр, который используется в методах классов для ссылки на текущий экземпляр объекта.
# Он позволяет методам класса получать доступ к атрибутам и другим методам этого экземпляра.
# Он говорит что данный атрибут относится к этому классу и позволяет с ним взаимодействовать.

# Наш метод __init__, так же можно встретить название конструктор,
# включает в себя перечень обязательных атрибутов данного класса - характеристики алфавита.

# title - название (название алфавита)
# abbreviation - аббревиатура
# list_letters - список букв

# У каждого алфавита есть название, аббревиатура и список букв.
# Так же при создании экземпляра класса, Мы будем получать сообщение print("Новый алфавит создан").

# Теперь давайте поговорим об экземпляре класса.

# Экземпляр класса — это конкретный объект, созданный на основе определения класса.
# Класс можно рассматривать как шаблон или чертеж, а экземпляр класса — как конкретное применение этого шаблона.
# Каждый экземпляр класса может иметь свои собственные атрибуты и методы, определенные в классе.
# russian = Alphabet("Русский", "RU", "абвгдеёжзийклмнопрстуфхцчшщъыьэюя")

# russian - имя экземпляра класса
# Alphabet - имя класса
# "Русский", "RU", "абвгдеёжзийклмнопрстуфхцчшщъыьэюя" - перечисление значений для экземпляра класса

# Мы можем обратиться к нашему экземпляру класса и получить значение одного из его атрибутов.
# Например, если Мы хотим получить название нового алфавита, нам необходимо прописать:

# print(russian.title)
# Результат: Русский


class Animal():
    """Создаем животное"""
    def __init__(self, name:str, age:int, height:int):
        """Инициализируем атрибуты животного"""
        self.name = name
        self.age = age
        self.height = height
        self.weight = 10

    def description_puppy(self):
        """Получение описания животного"""
        description = (self.name
                       + ", ему: " + str(self.age)
                       + " лет, " + "рост: " + str(self.height)
                       + " см" + ", вес: " + str(self.weight) + " кг")
        print("Нового питомца зовут: " + description)

    def get_weight(self):
        """Получение веса питомца"""
        print("Вес питомца: " + str(self.weight) + " кг")

    def update_weight(self, kg):
        """Изменение веса человека"""
        self.weight = self.weight + kg
        print("Вес изменился на: " + str(kg) + " кг")
        print("Текущий вес: " + str(self.weight) + " кг")

class Wolf(Animal):
    """Создаем класс волка"""

    def __init__(self, name:str, age:int, height:int):
        """Инициализируем атрибуты класса родителя"""
        super().__init__(name, age, height)
        self.rage = 100

    def get_rage(self):
        """Получение заряда ярости"""
        print("Заряд ярости волка равен: " + str(self.rage))

    def description_puppy(self):
        """Получение описания волка"""
        description = (self.name
                       + ", ему: " + str(self.age)
                       + " лет, " + "заряд ярости: " + str(self.rage))
        print("Нового волка зовут: " + description)
        return description



wild_wolf = Wolf("Дымок", 2, 45) # экземпляр класса потомка
wild_wolf.description_puppy()                     # описание потомка
# print("Нового волка зовут: " + wild_wolf.description_puppy())
# wild_wolf.get_rage()                              # Заряд ярости волка равен
# wild_wolf.update_weight(30)                       # изменение веса у потомка




# dog = Animal("Max", 10, 52)      # экземпляр класса предка
# dog.description_puppy()                           # описание экземпляра класса предка
# dog.get_weight()
# dog.update_weight(10)   # поправился на 10 кг
# dog.update_weight(-5)   # похудел на 5 кг
# dog.get_weight()




