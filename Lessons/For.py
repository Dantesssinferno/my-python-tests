# Цикл for в Python используется для последовательного выполнения блока кода для каждого элемента в итерируемом объекте, таком как список, кортеж, строка, диапазон чисел и т.д.
# Он позволяет легко обрабатывать коллекции данных и выполнять повторяющиеся действия.
"""
for переменная in объект:
    блок кода, который будет выполняться для каждого элемента
"""
# Где:
# переменная - переменная, которая будет последовательно принимать значения каждого элемента из объекта.
# объект - объект, по которому будет выполняться итерация (список, кортеж, строка, диапазон чисел и т.д.).
# блок кода - инструкции, которые будут выполняться для каждого элемента iterable.
# Одно из наиболее распространенных применений цикла for - это итерация по элементам списка:
fruits = ['яблоко', 'банан', 'вишня']
for fruit in fruits:
    print(f"Я люблю {fruit}")

# Результат:
# Я люблю яблоко
# Я люблю банан
# Я люблю вишня
# В этом примере Мы используем цикл for для последовательного перебора элементов списка fruits и выводим сообщение для каждого элемента.

# Счетчик итераций
# Во время использования цикла for Нам может понадобиться вести подсчет количества итераций (кругов), которые прошел цикл. Давайте рассмотрим как это сделать. Возьмем уже знакомый нам цикл и добавим туда счетчик итераций, который будет увеличиваться на +1 с каждым новым циклом
fruits = ['яблоко', 'банан', 'вишня']

iteration_count = 0                             # Инициализация счетчика

for fruit in fruits:
    iteration_count += 1                        # Увеличиваем счетчик на 1


print(f"Всего итераций: {iteration_count}")     # Вывод общего количества итераций

# Результат: Всего итераций: 3
# В Нашем списке всего 3 круга, а это значит что и циклов буде 3.
#
# Теперь рассмотрим пример, когда счетчик будет фиксировать только те итерации, в которых будет отрабатывать определенное условие, к примеру в элементе списка обязательно должна присутствовать буква "б". В данном списке под такое условие попадают два первых элементы, в них обоих есть буква "б"
fruits = ['яблоко', 'банан', 'вишня']

iteration_count = 0

for fruit in fruits:
    if "б" in fruit:
        print("В данном слове есть буква 'б'")
        iteration_count += 1

# Вывод общего количества итераций
print(f"Количество элементов которые содержат букву 'б': {iteration_count}")

# Результат:
#
# В данном слове есть буква 'б'
# В данном слове есть буква 'б'
# Количество элементов которые содержат букву 'б': 2

# Функция enumerate()
# Функция enumerate() позволяет одновременно получать индекс и элемент, что делает подсчет итераций более удобным.
fruits = ['яблоко', 'банан', 'вишня']

for i, fruit in enumerate(fruits):
    print(f"Итерация {i}: {fruit}")

# Результат:
# Итерация 0: яблоко
# Итерация 1: банан
# Итерация 2: вишня

# Где:
# i - переменная, которая обозначает номер нынешней итерации
# fruit - переменная которая подставляется в наш цикл и прописывается в print()
# enumerate() - функция которая принимает в себя название цикла для дальнейшей отработки
# Как Мы можем видеть, отсчет идет с 0, так как в программировании всегда он начинается с 0, но в обычной жизни Мы хотим видеть отсчет с 1, поэтому здесь можно включить начальную точку отсчета.
fruits = ['яблоко', 'банан', 'вишня']

for i, fruit in enumerate(fruits, start=1):
    print(f"Итерация {i}: {fruit}")


# Результат:
# Итерация 1: яблоко
# Итерация 2: банан
# Итерация 3: вишня

# в параметр start Мы прописываем начальную точку отсчета, в данном случае это 1.
# Сумма элементов списка через цикл for
# Для того ,чтобы посчитать сумму элементов списка, Мы можем воспользоваться следующей конструкцией:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
sum_elements = 0             # Создание переменной для хранения суммы

for element in numbers:
    sum_elements += element # Добавляем текущий элемент к сумме
print(f"Сумма всех элементов в списке: {sum_elements}")

# Результат:
# Сумма всех элементов в списке: 45
# Где:
# sum_elements - переменная, которой первоначально присвоено некоторое значение, в данном случае это 0, но можно установить и иную точку отсчета сумму.
# sum_elements += element - с каждой итерацией мы прибавляем значение элемента из списка, к той сумме которая у нас есть (не к первоначальному значению)
