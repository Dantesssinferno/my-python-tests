# Привет Друзья, в данной лекции Мы научимся работать с файлами через конструкцию With в Python.
# В Python существует специальный синтаксис with, который позволяет упростить работу с объектами, требующими очистки ресурсов после использования. Одним из наиболее распространенных примеров использования with является работа с файлами.
# Давайте рассмотрим синтаксис:
#
# with open(filename, mode) as file:
#     # код, который работает с файлом

# Где:
# filename - имя файла, который нужно открыть.
# mode - режим (ключ) открытия файла (например, 'r' для чтения, 'w' для записи, 'a' для добавления).
# file - переменная, которая будет ссылаться на открытый файл внутри блока with.

# Рассмотрим пример : Чтение файла
with open('test_file.txt', 'r') as file:
    content = file.read()
    print(content)
# В этом примере Мы открываем файл test.txt для чтения, читаем его содержимое и выводим на экран.
# После выхода из блока with файл автоматически закрывается.
# Нам не нужно прописывать file.close() как в предыдущем уроке.

# Запись в файл
with open('test_file.txt', 'w') as file:
    file.write('Hello, World!')
# В этом примере Мы открываем файл test.txt для записи и записываем строку 'Hello, World!' в файл.
# После выхода из блока with файл автоматически закрывается.

# Добавление данных в файл
with open('test_file.txt', 'a') as file:
    file.write('\nHi, World!')
# В этом примере Мы открываем файл test.txt для добавления и добавляем строку 'Hi, World!' в конец файла.
# После выхода из блока with файл автоматически закрывается.

# Преимущества использования with
# Использование with для работы с файлами имеет несколько преимуществ:
# Автоматическое закрытие файла: После выхода из блока with файл автоматически закрывается, даже если произошло исключение.
# Это помогает избежать утечек ресурсов и гарантирует, что файл всегда будет корректно закрыт.
# Более чистый и компактный код: Использование with делает код более читабельным и компактным, так как нет необходимости вручную вызывать метод close() для закрытия файла.