# var_1 = "Hello "
# var_2 = "World "
# var_3 = "I'm automated QA"
# result = var_1 + var_2 + var_3
#
# print("Результат: " + str(result))


# Строковый тип данных (str) является одним из основных типов данных в Python.
# Строки представляют собой последовательность символов Unicode и широко используются для хранения и обработки текстовой информации.
# В этой лекции Мы рассмотрим основные особенности строкового типа данных и операции, которые можно выполнять со строками в Python.
# Как Мы уже рассматривали ранее, строки могут быть заключены в одинарные ( ' ), двойные ( " ), или тройные ( ''' или """ )

# Мы можем производить сложение строк:
var_1 = 'Hello '
var_2 = 'World'
print(var_1 + var_2)
# Так же производить конкатенацию строк.
first_name = 'Иван'
last_name = 'Петров'
full_name = first_name + ' ' + last_name
print(first_name + ' ' + last_name)

# Результат: Иван Петров

# age = 30
# info = 'Мой возраст ' + age

# Результат: Ошибка: TypeError: can only concatenate str (not "int") to str
# Чтобы избежать ошибки, необходимо преобразовать значение age в строку, например, с помощью функции str():

age = 30
info = 'Мой возраст ' + str(age)
print(info)
# Результат: Мой возраст 30
# Отдельные символы в строке можно получить, используя индексацию.
# Индексация в Python начинается с 0, то есть первый символ будет начинаться с 0, а не с 1, как Мы привыкли в жизни
name = 'Иван'
print(name[0])
# Результат: И
print(name[3])
# Результат: Н
# Давайте рассмотрим несколько операций и функций со строками:
# Повторение строки - Мы можем умножить строку на число и получить повторение значения строки
name = 'Иван'
print(name * 3)
# Реузльтат: ИванИванИван

# Операции со строками
# Повторение строки - Мы можем умножить строку на число и получить повторение значения строки
name = 'Иван'
print(name * 3)
# Результат: ИванИванИван

# 1. strip() - возвращает новую строку с удаленными пробельными символами с начала и конца строки.
message = '   Hello, world!   '
print(message.strip())
# Результат: Hello, world!
# Метод strip() также может принимать аргумент, указывающий, какие символы нужно удалить.
# Если аргумент не указан, по умолчанию удаляются пробельные символы.
message = '---Hello, world!---'
print(message.strip('-'))
# Результат: Hello, world!
# 2. upper() - используется для преобразования всех символов в строке в верхний регистр.
message = 'hello, world!'
upper_message = message.upper()
print(upper_message)
# Результат: HELLO, WORLD!
# Метод upper() полезен, когда необходимо стандартизировать регистр символов в строке, например, для поиска, сравнения или сортировки.
# 3. title() - используется для преобразования строки в "титульный регистр", где первая буква каждого слова становится заглавной, а остальные буквы - строчными.
message = 'hello, world!'
titled_message = message.title()
print(titled_message)
# Результат: Hello, World!
# 4. Метод title() определяет "слово" как любую последовательность символов, отделенных пробелами. Таким образом, он преобразует первую букву каждого слова в верхний регистр, независимо от того, являются ли эти слова именами, названиями, предложениями и т.д.
# Метод title() полезен, когда необходимо стандартизировать регистр символов в строке, например, для заголовков, названий, имен и т.д.

# 5. isdigit() -  используется для проверки, состоит ли строка исключительно из цифр. Он возвращает True, если все символы строки являются цифрами, и False в противном случае.
var = "12345"
is_number = var.isdigit()
print(is_number)
# Результат: True
# 6. Для того, чтобы посмотреть все методы для типа данных строка, нам необходимо прописать следующее:
str = 'Hello'    # переменная содержащая значение в виде строки
print(dir(str))
# Функция dir() возвращает список всех методов и атрибутов, доступных для данного объекта.
# 7. Проверка на содержание префикса. startswith() - используется для проверки, начинается ли строка с указанного префикса.
text = "Hello, World"
result = text.startswith("Hel")
print(result)
# Результат: True
text = "Hello, World"
result = text.startswith("Haaa")
print(result)
# Результат: False
# 8. Так же, Мы можем производить поиск по окончанию строки, благодаря методу endswith().
# Так же, Мы можем производить поиск по окончанию строки, благодаря методу endswith().
text = "Hello, World"
result = text.endswith("rld")
print(result)
# Результат:  True
text = "Hello, World"
result = text.endswith("rld!")
print(result)
# Результат:   False
# 9. Проверка наличия подстроки в строке
# find() - используется для поиска подстроки в строке.
var = 'Hello, World.'
var_index = var.find('World')
print(var_index)
# Результат: 7
var = 'Hello, World.'
var_index = var.find('world')
print(var_index)
# Результат: -1
# Мы имеем ту же строку и подстроку, но уставили индекс начала отсчета поиска 1 и окончания 12
var = 'Hello, World.'
var_index = var.find('World', 1, 12)    # поиск только в пределах индексов 1-12)
print(var_index)
# Результат: 7