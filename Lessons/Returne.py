# При работе с функциями, а в будущем и методе, Мы должны учесть, что они должны либо что-то выводить на печать, либо что-то возвращать.

# Функция, которая выводит на печать результат своего выполнения

# Давайте рассмотрим следующий пример:
# Создадим функцию, которая будет складывать два числа и выводить сумму на печать

def sum_1(a, b):
    result = a + b
    print(f"Первая сумма равна {result}")

sum_1(5, 3)
# Результат: Первая сумма 8

# Но что, если Мы хотим в дальнейшем работать с сумой двух переменных, не только выводить на печать, а использовать в других операциях, для этого Нам нужно, чтобы функция возвращала требуемое нам значение.
# Это можно сделать с помощью оператора return.

# Функция, которая возвращает результат своего выполнения
# Оператор return в Python используется для возвращения значений из функций.
# Он позволяет передавать данные из функции обратно в вызывающий код, что делает функции более гибкими и полезными.

# Рассмотрим синтаксис:

"""
def name_of_function(аргументы, если есть)
    # Код функции
    return result
print(f"Первая сумма равна {sum_1(5, 3)} 

"""
# Мы все так же создаем переменную result, и через return возвращаем ее.
# И далее Мы можем так же вывести ее на печать, Вызвав ее в print() и передать в нее значения.

# Взаимодействие функций между собой
# Расмотрим такой пример:

def sum_1(a,b):
    result = a + b
    return result

print(f"Первая сумма равна {sum_1(5, 3)}")


def sum_2(s,t):
    result = s + t
    return result

print(f"Вторая сумма равна {sum_2(8, 10)}")

print(f"Общая сумма равна {sum_1(5,3) + sum_2(8, 10)}")    # Сумма двух функций


# Результат:
# Первая сумма равна 8
# Вторая сумма равна 18
# Общая сумма равна 26

# Мы имеем две схожие функции -  sum_1() и sum_2().
# Каждая из них производит сложение двух переменных и возвращает их.
# Далее Мы захотели сложить результат работы двух данных функций:
print(f"Общая сумма равна {sum_1(5,3) + sum_2(8, 10)}")
# В этой строчке Мы вызываем сразу две функции, при этом задавая в них значения, которые в дальнейшем будут присваиваться  переменным a,b,c,d.

# Функции, которые принимают значения из других функций

# Так же возможен вариант, когда Мы в одну функцию передаем значения других функций.

def sum_3(a, b):
    result = a + b
    return result

def sum_4(c, d):
    result = c + d
    return result

def mega_sum(f, g):
    result = f + g
    return result

print(f"Общая сумма равна {mega_sum(sum_3(5, 3), sum_4(8, 10))}")
# Результат: Общая сумма равна 26
# Наша новая строка
# print(f"Общая сумма равна {mega_sum(sum_1(5,3),sum_2(8,10))}")
# фактически равна строке из предыдущего примера
# print(f"Общая сумма равна {sum_1(5,3) + sum_2(8, 10)}")
# Но ее плюс заключается в том, что Мы можем продолжить работать с функцией mega_sum().

# Функция, которая возвращает несколько значений

# Функция способна возвращать сразу несколько значений, рассмотрим на примере

def name():
    name_1 = "Alex"
    name_2 = "Anna"
    return name_1, name_2

user_name_1, user_name_2 = name()
print(user_name_1)
print(user_name_2)

# Результат:
# Alex
# Anna

# Функция name() хранит в себе две переменные с именами и возвращает их.
# Функция name() возвращает кортеж из двух строк, и при вызове этой функции значения из кортежа распаковываются в переменные user_name_1 и user_name_2, которые затем выводятся на экран.
# Такой способ возврата нескольких значений из функции с помощью кортежа является распространенным приемом в Python.
# Он позволяет функции возвращать несколько результатов, которые затем могут быть использованы в вызывающем коде
# Подытожим, оператор return является важным инструментом в Python, позволяющим функциям возвращать значения обратно в вызывающий код.
# Он дает возможность создавать более гибкие и полезные функции, которые могут передавать данные между различными частями программы.
