# Множества представляют собой неупорядоченные коллекции уникальных элементов.
# Они используются для хранения и обработки данных, где важен только факт наличия элемента, а не его порядок или количество вхождений.
# Множество можно создать с помощью функции set() или путем инициализации переменной с использованием фигурных скобок {}


# Создание множества с помощью инициализации и фигурных скобок {}:
# colors = {"red", "green", "blue"}
# colors = set(["red", "green", "blue"])
# Для того, чтобы распечатать всё множество, нам необходимо прописать следующую команду:
# print(colors)
# Результат: {'green', 'red', 'blue'}

# Добавление и удаление элементов:

# Множество можно расширять, добавляя новые элементы с помощью метода add().
colors = {"Red", "Green", "Blue"}
print(colors) # Распечатаем, чтобы посмотреть содержимое до изменений
# Результат: {'red', 'blue', 'green'}
colors.add("Yellow") # Добавление нового элемента в множество и его значение
print(colors) # Распечатаем, чтобы посмотреть содержимое после изменений
# Результат: {'red', 'blue', 'green', 'yellow'}

# Удаление элементов из множества
# Множество можно уменьшать, удаляя элементы с помощью метода remove().
# Рассмотрим пример:
colors = {"red", "green", "blue"}
print(colors)    # Распечатаем, чтобы посмотреть содержимое до изменений
# Результат: {'blue', 'red', 'green'}
colors.remove("blue")
print(colors)    # Распечатаем, чтобы посмотреть содержимое после изменений
# Результат: {'red', 'green'}

# Основные операции с множествами
# Создадим два множества

colors_1 = {"red", "green", "blue"}
colors_2 = {"yellow", "green", "blue"}
# Множества поддерживают различные операции, такие как:

# 1. Объединение: | - сложение двух множеств, в результате чего,
# на печать выведутся только уникальные элементы, как Мы помним - в множестве нет дублей.

print(colors_1 | colors_2)
# Результат: {'yellow', 'red', 'green', 'blue'}

# 2. Пересечение: & - вывод элементов, которые есть в обоих множествах
print(colors_1 & colors_2)
# Результат: {'blue', 'green'}

# Так же это можно сделать через метод intersection():
result = colors_1.intersection(colors_2)
print(result)
# Результат: {'blue', 'green'}

# 3. Разность: - - результат, который содержится в первом множестве, но отсутствует во втором множестве
print(colors_1 - colors_2)
# Результат: {"Red"}

# 4. Симметрическая разность: ^ - вывод элементов из первого и второго множества, за вычетом дублей
print(colors_1 ^ colors_2)
# Результат: {"Red", "Yellow"}