# Списки (lists)  - это один из наиболее универсальных и широко используемых типов данных. Списки представляют собой упорядоченные коллекции элементов, которые могут быть разных типов данных. Списки позволяют хранить, изменять и обрабатывать данные в виде последовательности.
# Списки в Python создаются с помощью квадратных скобок [ ]. Элементы списка разделяются запятыми.
# Давайте рассмотрим на примере, какие элементы могут содержать списки:
# fruits = []    # пустой список
# fruits = ['яблоко', 'банан', 'вишня']    # список который содержит только строки
# numbers = [1, 2, 3, 4, 5]    # список который содержит только числа
# mixed_list = [1, 'Привет', 3.14, True]    # список который содержит разные типы данных
# Доступ к элементам списка
# Элементы списка доступны по индексам, которые начинаются с 0. Вы можете получить доступ к отдельным элементам, используя индексацию.
# Разберем на примере:

# fruits = ['яблоко', 'банан', 'вишня']

# print(fruits[0])
# Результат:  яблоко

# print(fruits[1])
# Результат:  банан

# print(fruits[-1]) #(отрицательные индексы отсчитываются с конца списка)
# Результат:  вишня

# Изменение элементов списка
# Списки в Python являются изменяемыми, что означает, что вы можете изменять их элементы.
# Основные операции со списками
# Списки поддерживают множество полезных операций, таких как:
# Конкатенация списков - это операция объединения двух или более списков в один новый список. В Python конкатенация списков выполняется с помощью оператора +.
fruits = ['яблоко', 'банан']
vegetables = ['морковь', 'картофель']
combined_list = fruits + vegetables
print(combined_list)

# Результат: ['яблоко', 'банан', 'морковь', 'картофель']
# Стоит отметить, что конкатенация списков возможна только с другими списками. Если попытаться конкатенировать список с другим типом данных, будет выброшено исключение TypeError.
# fruits = ['яблоко', 'банан']
# number = 42
# combined_list = fruits + number

# Результат: can only concatenate list (not "int") to list

# Помимо оператора +, вы также можете использовать метод extend() для добавления элементов одного списка в конец другого списка:
fruits = ['яблоко', 'банан']
vegetables = ['морковь', 'картофель']
fruits.extend(vegetables) # extend - добавление списка в конец другого списка
print(fruits)

# Результат: ['яблоко', 'банан', 'морковь', 'картофель']
# Повторение списков - Вы можете использовать оператор умножения * для повторения элементов списка определенное количество раз.
# Давайте рассмотрим синтаксис:
# название_нового_списка = название_старого_списка * количество_повторений
fruits = ['яблоко', 'банан']
repeated_fruits = fruits * 3
print(repeated_fruits)

# Результат: ['яблоко', 'банан', 'яблоко', 'банан', 'яблоко', 'банан']
# В этом примере Мы создаем новый список repeated_fruits, который содержит элементы исходного списка fruits, повторенные 3 раза.

# Проверка принадлежности элементов в списках в Python
# Вы можете использовать оператор in для проверки, является ли определенный элемент частью списка. Этот оператор возвращает True, если элемент найден в списке, и False в противном случае.
# element in list
# Где:
# element - элемент, который вы хотите проверить на принадлежность списку.
# list - список, в котором вы хотите проверить наличие элемента.

fruits = ['яблоко', 'банан', 'вишня']

print('яблоко' in fruits)
# Результат: True

print('апельсин' in fruits)
# Результат: False
# В этом примере Мы проверяем, принадлежат ли элементы 'яблоко' и 'апельсин' списку fruits. Первая проверка возвращает True, так как 'яблоко' есть в списке, а вторая проверка возвращает False, так как 'апельсин' отсутствует в списке.

# Получение длины - количество элементов в списке, используя встроенную функцию len().
# Давайте рассмотрим синтаксис:
# len(list)
# Где:
# list - список, длину которого вы хотите получить.
fruits = ['яблоко', 'банан', 'вишня']
length = len(fruits)
print(length)

# Результат: 3
# В этом примере Мы используем функцию len() для получения длины списка fruits, которая равна 3.
# Функция len() может быть полезна в различных ситуациях, например:
# Проверка, пуст ли список:
fruits = ['яблоко', 'банан']

if len(fruits) == 0:
    print("Список пуст")
else:
    print("Список не пуст")

# Результат: Список не пуст
# Функция len() возвращает целое число, представляющее количество элементов в списке. Она может быть использована с любым итерируемым объектом в Python, таким как строки, кортежи, множества и т.д.
# Получение длины списков - это простой и эффективный способ получения информации о размере коллекции данных, что может быть полезно в различных задачах программирования.

# Методы списков
# Списки в Python имеют множество встроенных методов, которые позволяют выполнять различные операции:

# 1. Метод append() используется для добавления нового элемента в конец списка. Он изменяет исходный список, добавляя новый элемент.
# Давайте рассмотрим синтаксис:
# list.append(element)
# Где:
# list - список, в который Вы хотите добавить элемент.
# element - элемент, который Вы хотите добавить в список.
fruits = ['яблоко', 'банан', 'вишня']
fruits.append('апельсин')
print(fruits)

# Результат: ['яблоко', 'банан', 'вишня', 'апельсин']
numbers = []
print(numbers)

# Результат: []

numbers.append(1)
print(numbers)

# Результат: [1]


numbers.append(2)
print(numbers)

# Результат: [1, 2]


numbers.append(3)
print(numbers)

# Результат: [1, 2, 3]
# Метод append() является одним из наиболее часто используемых методов для работы со списками в Python, так как он позволяет динамически расширять список по мере необходимости.

# 2. Метод insert() используется для вставки элемента в список по указанному индексу. Он сдвигает существующие элементы, начиная с указанного индекса, вправо, чтобы освободить место для нового элемента.
# Давайте рассмотрим синтаксис:
# list.insert(index, element)
# Где:
# list - список, в который вы хотите вставить элемент.
# index - индекс, по которому нужно вставить элемент.
# element - элемент, который вы хотите вставить в список.
fruits = ['яблоко', 'банан', 'вишня']
fruits.insert(2, 'черешня')
print(fruits)

# Результат: ['яблоко', 'апельсин', 'банан', 'вишня']
# Вставка нового элемента в начало списка
fruits = ['банан', 'вишня']
fruits.insert(0, 'яблоко')
print(fruits)

# Результат: ['яблоко', 'банан', 'вишня']

# Использование отрицательных индексов
fruits = ['яблоко', 'банан']
fruits.insert(-1, 'апельсин')
print(fruits)

# Результат: ['яблоко', 'апельсин', 'банан']