# Оператор if
# Оператор if используется для проверки условия. Если условие истинно (True), то выполняется блок кода, следующий за if. Если условие ложно (False), то блок кода пропускается.
# Оператор elif
# Оператор elif используется для проверки дополнительных условий, если предыдущие условия были ложными. Он позволяет создавать цепочки проверок.
# Оператор else
# Оператор else используется для выполнения блока кода, если все предыдущие условия были ложными. Он позволяет обработать случаи, когда ни одно из условий не было истинным.

# if-else
# Давайте разберем синтаксис простой схемы конструкции if-else,
"""
if выполняется условие:
     выполняем данный участок кода

else в любом другом случае:
     выполняем то что идет ниже
"""
# Рассмотрим пример с использованием функции input() для наглядности:

answer = input("Сегодня выходной день?: ")

if answer == "Да":
    print("Ура, можно выспаться")
else:
    print("Ну вот, пора на работу")

# Ввод: Да
# Результат: Ура, можно выспаться

# Ввод: любое другое строковое значение
# Результат: Ну вот, пора на работу

# Немного изменим нашу программу, заменим в блоке if условие ==, на != и поменяем print-ы местами

answer = input("Сегодня выходной день?: ")

if answer != 'Да':
     print("Ну вот, пора на работу")
else:
     print("Ура, можно выспаться")

# Ввод: любое другое строковое значение
# Результат: Ну вот, пора на работу

# Ввод: Да
# Результат: Ура, можно выспаться
# Теперь в случае если answer не равен 'Да', то мы получаем print("Ну вот, пора на работу"), в противном случае отработает блок else.
# Так же можно делать проверки на знаки больше, равно, больше или равно, меньше или равно.
# OR  и AND
# Так же используются условия через операторы OR(или) и AND(и). Рассмотрим их различие на примерах. Теперь Наш код делает проверку не на ответ Да или Нет, а на день недели:
answer = input("Введите день недели?: ")

if answer == 'Суббота' or answer == 'Воскресенье':
     print("Ура, можно выспаться")
else:
     print("Ну вот, пора на работу")

# Ввод: Суббота или Воскресенье
# Результат: Ура, можно выспаться

# Ввод: любое другое строковое значение
# Результат: Ну вот, пора на работу
# Оператор OR в данном случае позволяет делать проверку на несколько входных значений, если оно соответствует одному из них, то отрабатывает блок if, иначе уходим в else.
# Оператор AND противоположен ему и требует, чтобы оба значения соответствовали условию. Усложним нашу программу, теперь она будет задавать два вопроса: "Сегодня выходной день?: " и "Сегодня праздник?"

answer_1 = input("Сегодня выходной день?: ")
answer_2 = input("Сегодня праздник?: ")

if answer_1 == 'Да' and answer_2 == 'Да':
     print("Ура, можно выспаться")

else:
     print("Ну вот, пора на работу")

# Ввод_1: Да
# Ввод_2: Да
# Результат: Ура, можно выспаться

# Ввод_1: Да
# Ввод_2: Нет
# Результат: Ну вот, пора на работу

# Ввод_1: Нет
# Ввод_2: Да
# Результат: Ну вот, пора на работу

# Ввод_1: Нет
# Ввод_2: Нет
# Результат: Ну вот, пора на работу
# Для того, чтобы отработал код блока if необходимо, чтобы оба условия были выполнены, то есть получить два раза 'Да', если хоть раз будет 'Нет', или любое другое значение, то отработает код блока else.

# if-elif-else
# Теперь давайте рассмотрим конструкцию if-elif-else. Она позволяет создавать цепочку условий.
"""
if выполняется условие:
     выполняем данный участок кода

elif выполняется другое условие:

    выполняем данный участок кода

else:
 в любом другом случае
     выполняем то, что идет ниже
"""
# Рассмотрим на примере знакомой нам схеме:

answer = input("Введите день недели?: ")
if answer == "Суббота":
    print("Ура, можно выспаться")
elif answer == "Воскресенье":
    print("Эх, завтра на любимую работу")
else:
    print("Здравствуйте коллеги!")
# Ввод: Суббота
# Результат: Ура, можно выспаться
#
# Ввод: Воскресенье
# Результат: Эх, завтра на любимую работу
#
# Ввод: любое другое строковое значение
# Результат: Здравствуйте коллеги!

# Вложенные условия
# Мы так же можем создавать вложенные условия, давайте рассмотрим синтаксис:
"""
if условие:
     if условие:
          print(...)
     else:
          print(...)
else:
     print(...)
"""
# То есть Мы можем помещать условия внутри условия. Давайте рассмотрим на примере:
answer_1 = input("Сегодня выходной день?: ")

if answer_1 == 'Нет':
    print("Ну вот, пора на работу")
    answer_2 = input("Хочется на работу?: ")
    if answer_2 == 'Да':
        print("Вы явно любите свою работу")
    else:
        print("Все равно придется идти")

else:
    print("Ура, можно выспаться")

# Ввод: Нет
# Результат: Ну вот, пора на работу
#      Ввод: Да
#      Результат: Вы явно любите свою работу

# Ввод: Нет
# Результат: Ну вот, пора на работу
#      Ввод: Нет
#      Результат: Все равно придется идти

# Ввод: любое другое строковое значение
# Результат: Ура, можно выспаться
# В блоке if есть дополнительная логика, в которой задается второй вопрос и есть свой блок if-else, благодаря которому логика может расширяться. Если Мы в самом начале, при ответе на вопрос answer_1 введем значение, которое не соответствует блоку if, то Мы уходим в else, в противном случае, нас ждет продолжение работы в блоке if с вопросом answer_2.
# Зачем различать условные операторы?
# Различение условных операторов  if, elif и else важно по нескольким причинам:
# Управление ходом выполнения программы: Каждый оператор выполняет определенную роль в управлении ходом выполнения программы. if проверяет основное условие, elif проверяет дополнительные условия, а else обрабатывает случаи, когда ни одно из условий не было истинным.
# Читабельность и понятность кода: Использование правильных операторов делает код более читаемым и понятным. Это помогает другим разработчикам быстрее понять логику вашей программы.
# Избежание ошибок: Неправильное использование операторов может привести к непредвиденному поведению программы и ошибкам.