# Привет Друзья, в данной лекции Мы научимся работать с исключениями и конструкцией try-except в Python.
# Исключения - это механизм, позволяющий обработать ошибки, которые могут возникнуть при выполнении кода.

# try-except

# В этом уроке Мы рассмотрим, как использовать конструкцию try-except для обработки исключений в Python.
# Конструкция try-except состоит из двух частей:
#
# try - блок кода, который может вызвать исключение
#
# except - блок кода, который будет выполнен, если исключение возникло.
#
# Синтаксис конструкции:
"""
try:
    # Код, который может вызвать исключение
except ExceptionType:
    # Код, который будет выполнен, если исключение возникло
"""
# где ExceptionType - это тип исключения, который вы хотите обработать.

# Список исключений в Python - SpecialistOff.NET - Вот здесь Вы можете посмотреть список исключений в Python и причину, по которой она возникает.

# Теперь давайте напишем небольшой код и попробуем получить исключение:

num_1=int(input("Введите первое число: "))
num_2=int(input("Введите второе число: "))

result = num_1 / num_2
print(f"Результат деления: {result}")

# Система принимает два числа и производит их деление,
# как Мы знаем на 0 делить нельзя и в случае деления на 0, Мы получим исключение ZeroDivisionError.

# Результат:
#
# Введите первое число: 15
# Введите второе число: 5
# Результат деления: 3.0
#
# Введите первое число: 15
# Введите второе число: 0
# ZeroDivisionError: division by zero

# Мы знаем имя исключения и можем теперь использовать конструкцию try-except:

num_1=int(input("Введите первое число: "))
num_2=int(input("Введите второе число: "))

try:
    result = num_1 / num_2
    print(f"Результат деления: {result}")
except ZeroDivisionError:
    print("На ноль делить нельзя")    # Информирующее предупреждение для пользователя


# Результат:
#
# Введите первое число: 15
# Введите второе число: 5
# Результат деления: 3.0
#
# Введите первое число: 15
# Введите второе число: 0
# На ноль делить нельзя

# Теперь в случае, если пользователь введет второе число больше 0,
# то получит результат арифметического действия, а если 0, то предупреждение, что на 0 делить нельзя.

# try-finally

# finally - это блок кода, который будет выполнен всегда, независимо от того,  будет ли выполнен блок except.
# Синтаксис конструкции:

"""
try:
    # Код, который может вызвать исключение
finally:
    # Код, который будет выполнен всегда
"""

# Рассмотрим на примере:

num_1=int(input("Введите первое число: "))
num_2=int(input("Введите второе число: "))

try:
    result = num_1 / num_2
    print(f"Результат деления: {result}")
finally:
    print("До скорых встреч")


# Результат:
#
# Введите первое число: 15
# Введите второе число: 5
# Результат деления: 3.0
# До скорых встреч
#
#
#
# Введите первое число: 15
# Введите второе число: 0
# До скорых встреч
# ZeroDivisionError: division by zero

# Теперь в случае, если пользователь введет второе число больше 0,
# то получит результат арифметического действия и система с ним попрощается,
# а если 0, то исключение ZeroDivisionError и все равно попрощается.
#
# Но обычный пользователь, не должен получать системные ошибки,
# он должен получать "человеческое" сообщение, поэтому вернем в нашу конструкцию код с except.

# num_1=int(input("Введите первое число: "))
# num_2=int(input("Введите второе число: "))
#
# try:
#     result = num_1 / num_2
#     print(f"Результат деления: {result}")
# except ZeroDivisionError:
#     print("На ноль делить нельзя")
# finally:
#     print("До скорых встреч")


# Результат:
#
# Введите первое число: 15
# Введите второе число: 5
# Результат деления: 3.0
# До скорых встреч
#
#
#
# Введите первое число: 15
# Введите второе число: 0
# На ноль делить нельзя
# До скорых встреч

# Теперь в случае, если пользователь введет второе число больше 0,
# то получит результат арифметического действия и система с ним попрощается,
# а если 0, то предупреждение, что на 0 делить нельзя и система с ним попрощается.
#
# Исключения в Python позволяют обработать ошибки,
# которые могут возникнуть при выполнении кода.
# Конструкция try-except позволяет нам обработать исключения,
# а finally блок кода позволяет нам выполнить код,
# который должен быть выполнен в любом случае.

